<?xml version="1.0"?>
<syntax name="sourcecode.as3">
	<zones>
		
		<!-- Package -->
		<zone name="container.package.as3">
			<expression>\b(package)\s*([a-zA-Z_\.]*)?</expression>
			<capture number="1" name="keyword.package.as3" />
			<capture number="2" name="name.as3" />
		</zone>
		
		<include collection="language.as3" />
	</zones>
	
	
	<library>
		<collection name="language.as3">
			<include collection="contaner.import.as3" />
			<include collection="container.class.as3" />
			<include collection="container.method.as3" />
			<include collection="container.block.as3" />
			<include collection="keyword.as3" />
			<include collection="delimiter.as3" />
			<include collection="literal.string" />
	        <include collection="literal.numeric" />
			<include collection="literal.keyword" />
			<include collection="literal.collection" />
			<include collection="metadata.comment" />
		</collection>
		
		<!-- Import -->
		<collection name="container.import.as3">
			<zone name="container.import.as3">
				<expression>\b(import)\s+([a-zA-Z_\.]*)</expression>
				<capture number="1" name="keyword.definition.import.as3" />
				<capture number="2" name="name.as3" />
			</zone>
		</collection>
		
		<!-- Class -->
		<collection name="container.class.as3">
			<zone name="container.class.as3">
					<expression>\b(class)\s+([a-zA-Z_$]\w*)\s*([a-zA-Z\w\s]*)</expression>
					<capture number="1" name="keyword.definition.class.as3" />
					<capture number="2" name="name.as3" />	
			</zone>
		</collection>
		
		<!-- Function -->
		<collection name="container.method.as3">
			<zone name="container.method.as3">
				<starts-with>
					<expression>\b(function)\s?+([a-zA-Z_$]\w*)?\s*(\()</expression>
					<capture number="1" name="keyword.definition.function.as3" />
					<capture number="2" name="name.as3" />
					<capture number="3" name="delimiter.balanced.parenthesis.condition.begin.as3"/>
				</starts-with>
				<ends-with>
					<expression>\)(:[a-zA-Z\w]*)?</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.condition.end.as3"/>
				</ends-with>
				<subzones>
					<include collection="container.block.subzones.as3" />
				</subzones>
			</zone>
		</collection>
		
		<!-- Containers from (grabbed from PHP.sugar) -->
		<collection name="container.block.as3">
            <zone name="container.block.if.as3">
                <starts-with>
                    <expression>(\bif\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.if.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.elseif.as3">
                <starts-with>
                    <expression>(\belse\s*if\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.elseif.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.else.as3">
                <expression>(\belse\b)</expression>
                <capture number="1" name="keyword.control.flow.else.as3" />
                <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
            </zone>
            <zone name="container.block.foreach.as3">
                <starts-with>
                    <expression>(\bfor\s*each\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.foreach.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <zone name="operator.as.as3">
                        <expression>as</expression>
                    </zone>
					<zone name="operator.in.as3">
                        <expression>in</expression>
                    </zone>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.for.as3">
                <starts-with>
                    <expression>(\bfor\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.for.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.while.as3">
                <starts-with>
                    <expression>(\bwhile\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.while.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.dowhile.as3">
                
                    <expression>\b(do)</expression>
                    <capture number="1" name="keyword.control.flow.dowhile.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />

            </zone>
            <zone name="container.block.switch.as3">
                <starts-with>
                    <expression>(\bswitch\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.switch.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
            <zone name="container.block.try.as3">
                <expression>(\btry\b)</expression>
                <capture number="1" name="keyword.control.flow.try.as3" />
            </zone>
            <zone name="container.block.catch.as3">
                <starts-with>
                    <expression>(\bcatch\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.catch.as3" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin.as3" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end.as3" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones.as3" />
                </subzones>
            </zone>
        </collection>
		
		<collection name="container.block.subzones.as3">
			<include collection="metadata.comment.as3" />
	        <include collection="literal.collection.as3" />
	        <include collection="container.block.as3" />
	        <include collection="literal.keyword.as3" />
	        <include collection="identifier.function.as3" />
	        <include collection="delimiter.as3" />
	        <include collection="operator.as3" />
	        <include collection="identifier.variable.as3" />
	        <include collection="identifier.class.as3" />
	        <include collection="literal.string.as3" />
	        <include collection="literal.numeric.as3" />
	        <include collection="keyword.as3" />
		</collection>
		<!-- End from PHP Sugar -->
		
		<!-- Delimiters (grabbed from elliottcable's Ruby.sugar) -->
        
        <collection name="delimiter.as3">
            <zone name="delimiter.terminator.as3">
                <expression>\;</expression>
            </zone>
            <zone name="delimiter.separator.comma.as3">
                <expression>,</expression>
            </zone>
            <zone name="delimiter.separator.pairing.as3">
                <expression>=></expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.begin.as3">
                <expression>\{</expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.end.as3">
                <expression>\}</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.begin.as3">
                <expression>\(</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.end.as3">
                <expression>\)</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.begin.as3">
                <expression>\[</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.end.as3">
                <expression>\]</expression>
            </zone>
        </collection>
		
		<collection name="comment.as3">
			<zone name="comment.block.documentation">
				<starts-with>
					<expression>/\*\*</expression>
					<capture number="0" name="punctuation.definition.begin"/>
				</starts-with>
				<ends-with>
					<expression>\*/</expression>
					<capture number="0" name="punctuation.definition.end"/>
				</ends-with>
			</zone>
			<zone name="comment.block">
				<starts-with>
					<expression>/\*</expression>
					<capture number="0" name="punctuation.definition.begin"/>
				</starts-with>
				<ends-with>
					<expression>\*/</expression>
					<capture number="0" name="punctuation.definition.end"/>
				</ends-with>
			</zone>
			<zone name="comment.line.double-slash">
				<expression>(//).*$\n?</expression>
				<capture number="1" name="punctuation.definition.begin"/>
			</zone>
		</collection>
		
		<!-- Keywords -->
		<collection name="keyword.as3">
			<zone name="keyword.definition.as3">
				<expression>\b(package|class|function|import|interface|extends|implements|var|new|this|const|void)</expression>
			</zone>
			<zone name="keyword.definition.class.top-level.as3">
				<expression>\b(R(e(ferenceError|gExp)|angeError)|XML(List)?|Math|Boolean|int|S(yntaxError|tring|ecurityError)|N(umber|amespace)|Class|uint|TypeError|Object|D(efinitionError|ate)|URIError|E(valError|rror)|arguments|VerifyError|QName|Function|Ar(ray|gumentError))\b</expression>
			</zone>
			<zone name="keyword.definition.class.flash.as3">
				<expression>\b(Re(sponder|ctangle)|G(lowFilter|r(idFitType|a(dient(GlowFilter|BevelFilter|Type)|phics)))|XML(Socket|Node(Type)?|Document)|M(icrophone|o(use(Event)?|vieClip|rphShape)|emoryError|atrix)|B(yteArray|itmap(Data(Channel)?|Filter(Type|Quality)?)?|evelFilter|l(urFilter|endMode))|S(ha(pe|redObject(FlushStatus)?)|y(stem|ncEvent)|c(ene|riptTimeoutError)|t(yleSheet|a(ckOverflowError|t(icText|usEvent)|ge(ScaleMode|DisplayState|Quality|Align)?))|impleButton|o(cket|und(Mixer|Channel|Transform|LoaderContext)?)|pr(ite|eadMethod)|ecurity(Domain|Panel|ErrorEvent)?|WFVersion)|HTTPStatusEvent|Net(St(atusEvent|ream)|Connection)|C(SMSettings|o(n(textMenu(BuiltInItems|Item|Event)?|volutionFilter)|lor(MatrixFilter|Transform))|a(p(sStyle|abilities)|mera))|T(imer(Event)?|ext(Renderer|Snapshot|ColorType|DisplayMode|Event|F(ield(Type|AutoSize)?|ormat(Align)?)|LineMetrics)|ransform)|I(n(ter(polationMethod|activeObject)|validSWFError)|ME(ConversionMode|Event)?|BitmapDrawable|OError(Event)?|D(ynamicProperty(Output|Writer)|3Info|ata(Input|Output))|E(ventDispatcher|xternalizable)|llegalOperationError)|ObjectEncoding|D(i(spla(yObject(Container)?|cementMapFilter(Mode)?)|ctionary)|ataEvent|ropShadowFilter)|URL(Request(Method|Header)?|Stream|Variables|Loader(DataFormat)?)|JointStyle|P(ixelSnapping|oint|r(intJob(O(ptions|rientation))?|o(gressEvent|xy)))|E(ndian|OFError|vent(Dispatcher|Phase)?|rrorEvent|xternalInterface)|Video|Key(board(Event)?|Location)|F(ile(Reference(List)?|Filter)|o(nt(Style|Type)?|cusEvent)|ullScreenEvent|rameLabel)|L(ineScaleMode|o(calConnection|ader(Context|Info)?))|A(syncErrorEvent|ntiAliasType|c(cessibility(Properties)?|ti(onScriptVersion|vityEvent))|pplicationDomain|VM1Movie))\b</expression>
			</zone>
			<zone name="keyword.definition.class.fl.as3">
				<expression>\b(R(otate(Direction)?|egular|adioButton(Group|AccImpl)?)|M(otion(Event)?|etadataEvent|atrixTransformer)|B(ounce|utton(LabelPlacement|AccImpl)?|ezier(Segment|Ease)|linds|a(se(Button|ScrollPane)|ck))|S(croll(Bar(Direction)?|P(olicy|ane)|Event)|t(yleManager|rong)|i(ne|mple(CollectionItem|Ease))|ou(ndEvent|rce)|electableList(AccImpl)?|kinErrorEvent|queeze|lider(Direction|Event(ClickTarget)?)?)|HeaderRenderer|N(one|CManager(Native)?|umericStepper)|C(heckBox(AccImpl)?|ircular|o(lor(Picker(Event)?)?|m(ponentEvent|boBox(AccImpl)?))|u(stomEase|ePointType|bic)|ellRenderer|aption(ChangeEvent|TargetEvent))|T(ileList(CollectionItem|Data|AccImpl)?|ext(Input|Area)|ween(Event|ables)?|ransition(Manager)?)|I(n(teractionInputType|determinateBar|validationType)|NCManager|CellRenderer|Tween|VPEvent|ris|FocusManager(Group|Component)?|mageCell)|Zoom|Data(Grid(C(olumn|ellEditor)|Event(Reason)?|AccImpl)?|Change(Type|Event)|Provider)|UI(ScrollBar|Component(AccImpl)?|Loader)|P(hoto|ixelDissolve|rogressBar(Mode|Direction)?)|E(lastic|xponential)|Video(S(caleMode|tate)|P(layer|rogressEvent)|E(vent|rror)|Align)|Keyframe|Qu(intic|a(dratic|rtic))|F(ocusManager|unctionEase|ly|ade|LVPlayback(Captioning)?)|Wipe|L(i(st(Data|Event|AccImpl)?|near|vePreviewParent)|ocale|a(youtEvent|bel(Button(AccImpl)?)?))|A(nimator|ccImpl|utoLayoutEvent))\b</expression>
			</zone>

			<zone name="keyword.definition.class.air.as3">
				<expression>\b(ServiceMonitor|SocketMonitor|URLMonitor|ApplicationUpdater|ApplicationUpdaterUI|DownloadErrorEvent|StatusFileUpdateErrorEvent|StatusFileUpdateEvent|StatusUpdateErrorEvent|StatusUpdateEvent|UpdateEvent)\b</expression>
			</zone>
			<zone name="keyword.control.flow.as3">
                <expression>\b(break|case|continue|default|do|else(if)?|for(each)?|if|switch|while|return)</expression>
            </zone>
			<zone name="keyword.modifier.scope.as3">
				<expression>\b(public|private|protected|static|dynamic|override)</expression>
			</zone>
			<zone name="keyword.control.operators.as3">
				<expression>\b(==|=|&lt;|&lt;)</expression>
			</zone>
		</collection>
		
		<!-- Literals Grabbed from PHP.sugar-->
	    
	    <collection name="literal.string">
            <zone name="literal.string.quoted.single">
                <starts-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.begin"/>
                </starts-with>
                <ends-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.end"/>
                </ends-with>
                <subzones>
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)('|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
            <zone name="literal.string.quoted.double">
                <starts-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.begin"/>
                </starts-with>
                <ends-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.begin"/>
                </ends-with>
                <subzones>
                    <include collection="identifier.variable" />
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)("|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
	    </collection>
	    
        <collection name="literal.numeric">
            <!--
            I want to seperately hilight all the different types of
            literal.numerics. So, we have to provide multiple similar definitions
            of a literal.numeric.
            
			Grabbed from PHP Sugar
            Grabbed from elliottcable's Ruby.sugar
            -->
            <!-- 01756 -->
            <zone name="literal.numeric.integer.octal">
                <expression>\b(0)([0-7]+)\b</expression>
                <capture number="1" name="numeric.delimiter.octal.initial-zero"/>
                <capture number="2" name="numeric.octal.value"/>
            </zone>
            <!-- 0b010010110 -->
            <zone name="literal.numeric.integer.binary">
                <expression>\b(0(?:b|B))([01]+)\b</expression>
                <capture number="1" name="numeric.delimiter.binary.initial-zero-b"/>
                <capture number="2" name="numeric.binary.value"/>
            </zone>
            <!-- 0xDEADBEEF586 -->
            <zone name="literal.numeric.integer.hex">
                <expression>\b(0(?:x|X))([0-9a-fA-F]+)\b</expression>
                <capture number="1" name="numeric.delimiter.hexadecimal.initial-zero-x"/>
                <capture number="2" name="numeric.hexadecimal.value"/>
            </zone>
            <!-- 142.87e3, 0.22e8 -->
            <zone name="literal.numeric.float.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
                <capture number="4" name="literal.numeric.exponent.delimiter"/>
                <capture number="5" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142.87, 0.22 -->
            <zone name="literal.numeric.float">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="literal.numeric.exponent.delimiter"/>
                <capture number="3" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal">
                <expression>\b(0|[1-9][0-9]*)\b</expression>
                <capture number="1" name="integral.value"/>
            </zone>
        </collection>
        
        <collection name="literal.keyword">
            <!-- true -->
            <zone name="literal.keyword.bool.true">
            	<expression>\btrue\b</expression>
            </zone>
            <!-- false -->
            <zone name="literal.keyword.bool.false">
            	<expression>\bfalse\b</expression>
            </zone>
            <!-- null -->
            <zone name="literal.keyword.nothing.null">
            	<expression>\bnull\b</expression>
            </zone>
            <!-- echo -->
            <zone name="literal.keyword.constant.echo">
            	<expression>\becho\b</expression>
            </zone>
			<!-- print -->
            <zone name="literal.keyword.constant.print">
            	<expression>\bprint\b</expression>
            </zone>
        </collection>

		<!-- Metadata grabbed from PHP.sugar-->
		<collection name="metadata.comment">
			<!-- // comment -->
			<zone name="metadata.comment.line.double-slash">
				<expression>(//)(\s?(.*)?$\n?)</expression>
				<capture number="1" name="delimiter.separator.double-slash.comment.begin" />
				<capture number="3" name="content" />
			</zone>
			
			<zone name="metadata.comment.documentation">
				<starts-with>
					<expression>(/\*\*)(\**)</expression>
					<capture number="1" name="delimiter.separator.slash.double-asterisk.comment.begin"/>
				</starts-with>
				<ends-with>
					<expression>(\**)(\*/)</expression>
					<capture number="2" name="delimiter.separator.slash.single-asterisk.comment.end"/>
				</ends-with>
				<subzones>
					<zone name="comment.line">
						<starts-with>
							<expression>(\*)</expression>
							<capture number="1" name="delimiter.separator.asterisk" />
						</starts-with>
						<ends-with>
							<expression>$\n?</expression>
						</ends-with>
						<subzones>
							<include collection="metadata.comment.asDoc" />
							<zone name="content">
								<expressoin>(.*)?</expressoin>
								<capture number="3" name="content" />
							</zone>
						</subzones>
					</zone>
				</subzones>
			</zone>			
			<zone name="metadata.comment.block">
				<starts-with>
					<expression>(/\*)</expression>
					<capture number="1" name="delimiter.separator.slash.single-asterisk.comment.begin"/>
				</starts-with>
				<ends-with>
					<expression>(\*/)</expression>
					<capture number="1" name="delimiter.separator.slash.single-asterisk.comment.end"/>
				</ends-with>
			</zone>
	    </collection>
		
	</library>
</syntax>